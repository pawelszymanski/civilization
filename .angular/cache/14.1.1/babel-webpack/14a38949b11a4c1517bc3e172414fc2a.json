{"ast":null,"code":"import { TerrainBaseId, TerrainFeatureId, TerrainImprovementId, TerrainResourceId } from '../models/terrain';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./tile-yield.service\";\nexport let MapGeneratorService = /*#__PURE__*/(() => {\n  class MapGeneratorService {\n    constructor(tileYieldService) {\n      this.tileYieldService = tileYieldService;\n    }\n\n    createEmptyOceanTile(grid) {\n      const tile = {\n        grid,\n        terrain: {\n          base: {\n            id: TerrainBaseId.OCEAN,\n            variation: 1\n          },\n          feature: {\n            id: TerrainFeatureId.NONE,\n            variation: null\n          },\n          resourceId: TerrainResourceId.NONE,\n          improvementId: TerrainImprovementId.NONE\n        }\n      };\n      this.tileYieldService.updateTileYield(tile);\n      return tile;\n    }\n\n    generateNewGameMap(mapGeneratorSettings) {\n      const width = mapGeneratorSettings.width;\n      const height = mapGeneratorSettings.height;\n      const map = {\n        tiles: [],\n        width,\n        height\n      };\n\n      for (let x = 0; x < width; x++) {\n        for (let y = 0; y < height; y++) {\n          map.tiles.push(this.createEmptyOceanTile({\n            x,\n            y\n          }));\n        }\n      }\n\n      return map;\n    }\n\n  }\n\n  MapGeneratorService.ɵfac = function MapGeneratorService_Factory(t) {\n    return new (t || MapGeneratorService)(i0.ɵɵinject(i1.TileYieldService));\n  };\n\n  MapGeneratorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapGeneratorService,\n    factory: MapGeneratorService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapGeneratorService;\n})();","map":null,"metadata":{},"sourceType":"module"}