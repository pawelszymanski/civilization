{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { TileInfoOverlayId, TileResourceOverlayId } from '../models/gameplay-ui';\nimport { DEFAULT_GAMEPLAY_UI } from '../consts/gameplay-ui.const';\nimport * as i0 from \"@angular/core\";\nexport let GameplayUiStore = /*#__PURE__*/(() => {\n  class GameplayUiStore {\n    constructor() {\n      // tslint:disable-next-line:variable-name\n      this._gameplayUi = new BehaviorSubject(DEFAULT_GAMEPLAY_UI);\n      this.gameplayUi = this._gameplayUi.asObservable();\n    }\n\n    next(gameplayUi) {\n      this._gameplayUi.next(gameplayUi);\n    }\n\n    toggleGrid() {\n      this._gameplayUi.next(Object.assign(Object.assign({}, this._gameplayUi.value), {\n        showGrid: !this._gameplayUi.value.showGrid\n      }));\n    }\n\n    toggleMinimap() {\n      this._gameplayUi.next(Object.assign(Object.assign({}, this._gameplayUi.value), {\n        showMinimap: !this._gameplayUi.value.showMinimap\n      }));\n    }\n\n    toggleTileInfoOverlay(tileInfoOverlayId) {\n      const newTileInfoOverlayId = this._gameplayUi.value.infoOverlay === tileInfoOverlayId ? TileInfoOverlayId.NONE : tileInfoOverlayId;\n\n      this._gameplayUi.next(Object.assign(Object.assign({}, this._gameplayUi.value), {\n        infoOverlay: newTileInfoOverlayId\n      }));\n    }\n\n    toggleTileResourceOverlay(tileResourceOverlayId) {\n      const newTileResourceOverlayId = this._gameplayUi.value.resourceOverlay === tileResourceOverlayId ? TileResourceOverlayId.NONE : tileResourceOverlayId;\n\n      this._gameplayUi.next(Object.assign(Object.assign({}, this._gameplayUi.value), {\n        resourceOverlay: newTileResourceOverlayId\n      }));\n    }\n\n  }\n\n  GameplayUiStore.ɵfac = function GameplayUiStore_Factory(t) {\n    return new (t || GameplayUiStore)();\n  };\n\n  GameplayUiStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GameplayUiStore,\n    factory: GameplayUiStore.ɵfac\n  });\n  return GameplayUiStore;\n})();","map":null,"metadata":{},"sourceType":"module"}