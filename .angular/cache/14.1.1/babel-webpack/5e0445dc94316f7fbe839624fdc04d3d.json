{"ast":null,"code":"import { CAMERA_ZOOM_LEVEL_TO_TILE_SIZE_MAP } from '../consts/camera.const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./camera.service\";\nimport * as i2 from \"./tile-yield.service\";\nimport * as i3 from \"../stores/camera.store\";\nimport * as i4 from \"../stores/size.store\";\nexport let MapZoomService = /*#__PURE__*/(() => {\n  class MapZoomService {\n    constructor(cameraService, tileYieldService, cameraStore, sizeStore) {\n      this.cameraService = cameraService;\n      this.tileYieldService = tileYieldService;\n      this.cameraStore = cameraStore;\n      this.sizeStore = sizeStore;\n      this.subscribeToData();\n    }\n\n    subscribeToData() {\n      this.cameraStore.camera.subscribe(camera => this.camera = camera);\n      this.sizeStore.size.subscribe(size => this.size = size);\n    } // +1 for zooming in (roll forward), -1 for zooming out (roll backward)\n\n\n    wheelEventToStep(wheelEvent) {\n      return -(Math.abs(wheelEvent.deltaY) / wheelEvent.deltaY);\n    }\n\n    handleWheelEvent(event) {\n      // calculate new zoom level\n      const step = this.wheelEventToStep(event);\n      const currentZoomLevel = this.camera.zoomLevel;\n      const newZoomLevel = this.cameraService.normalizeZoomLevel(currentZoomLevel + step);\n\n      if (newZoomLevel === currentZoomLevel) {\n        return;\n      } // calculate new translate\n\n\n      const currentTranslate = this.camera.translate;\n      const canvasCoordsAtScreenCenter = {\n        x: Math.floor(this.size.screen.width / 2 - currentTranslate.x),\n        y: Math.floor(this.size.screen.height / 2 - currentTranslate.y)\n      };\n      const scale = CAMERA_ZOOM_LEVEL_TO_TILE_SIZE_MAP[newZoomLevel] / CAMERA_ZOOM_LEVEL_TO_TILE_SIZE_MAP[currentZoomLevel]; // set zoom level first so it can used in normalization of the translation\n\n      this.cameraStore.setZoomLevel(newZoomLevel); // calculate new translate, normalize then set it\n\n      const newTranslate = {\n        x: -Math.round(canvasCoordsAtScreenCenter.x * scale - this.size.screen.width / 2),\n        y: -Math.round(canvasCoordsAtScreenCenter.y * scale - this.size.screen.height / 2)\n      };\n      this.cameraStore.setTranslate(newTranslate);\n    }\n\n  }\n\n  MapZoomService.ɵfac = function MapZoomService_Factory(t) {\n    return new (t || MapZoomService)(i0.ɵɵinject(i1.CameraService), i0.ɵɵinject(i2.TileYieldService), i0.ɵɵinject(i3.CameraStore), i0.ɵɵinject(i4.SizeStore));\n  };\n\n  MapZoomService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapZoomService,\n    factory: MapZoomService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapZoomService;\n})();","map":null,"metadata":{},"sourceType":"module"}