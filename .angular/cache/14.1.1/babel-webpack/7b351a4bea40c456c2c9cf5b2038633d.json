{"ast":null,"code":"import { TileHighlightId } from '../models/map';\nimport { TileInfoOverlayId } from '../models/gameplay-ui';\nimport { GRID_LINE_STYLE, GRID_LINE_WIDTH, TILE_INFO_TEXT_FONT, TILE_INFO_TEXT_SIZE, TILE_INFO_TEXT_STYLE, TILE_HIGHLIGHT_ID_TO_COLOR_MAP, TILE_INFO_TEXT_MIN_TILE_WIDTH } from '../consts/map-style.const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./tile-ui.service\";\nimport * as i2 from \"../stores/map.store\";\nimport * as i3 from \"../stores/camera.store\";\nimport * as i4 from \"../stores/size.store\";\nimport * as i5 from \"../stores/gameplay-ui.store\";\nimport * as i6 from \"../stores/world-builder-hovered-tiles.store\";\nimport * as i7 from \"../pipes/terrain-base-name.pipe\";\nimport * as i8 from \"../pipes/terrain-feature-name.pipe\";\nimport * as i9 from \"../pipes/terrain-improvement-name.pipe\";\nimport * as i10 from \"../pipes/terrain-resource-name.pipe\";\nexport let MapCanvasService = /*#__PURE__*/(() => {\n  class MapCanvasService {\n    constructor(tileUiService, mapStore, cameraStore, sizeStore, gameplayUiStore, worldBuilderHoveredTilesStore, terrainBaseNamePipe, terrainFeatureNamePipe, terrainImprovementNamePipe, terrainResourceNamePipe) {\n      this.tileUiService = tileUiService;\n      this.mapStore = mapStore;\n      this.cameraStore = cameraStore;\n      this.sizeStore = sizeStore;\n      this.gameplayUiStore = gameplayUiStore;\n      this.worldBuilderHoveredTilesStore = worldBuilderHoveredTilesStore;\n      this.terrainBaseNamePipe = terrainBaseNamePipe;\n      this.terrainFeatureNamePipe = terrainFeatureNamePipe;\n      this.terrainImprovementNamePipe = terrainImprovementNamePipe;\n      this.terrainResourceNamePipe = terrainResourceNamePipe;\n      this.wbHoveredTiles = [];\n      this.subscribeToData();\n    }\n\n    subscribeToData() {\n      this.cameraStore.camera.subscribe(camera => this.camera = camera);\n      this.sizeStore.size.subscribe(size => this.size = size);\n      this.mapStore.map.subscribe(map => {\n        this.map = map;\n        this.firstRowTiles = this.map.tiles.filter(t => t.grid.y === 0);\n        this.lastRowTiles = this.map.tiles.filter(t => t.grid.y === this.map.height - 1);\n      });\n      this.gameplayUiStore.gameplayUi.subscribe(gameplayUi => this.gameplayUi = gameplayUi);\n      this.worldBuilderHoveredTilesStore.wbHoveredTiles.subscribe(wbHoveredTiles => this.wbHoveredTiles = wbHoveredTiles);\n    }\n\n    setCommonStyles() {\n      this.ctx.lineWidth = GRID_LINE_WIDTH;\n      this.ctx.strokeStyle = GRID_LINE_STYLE;\n      this.ctx.textAlign = 'center';\n      this.ctx.textBaseline = 'bottom';\n      this.ctx.font = `${TILE_INFO_TEXT_SIZE}px ${TILE_INFO_TEXT_FONT}`;\n      this.ctx.fillStyle = TILE_INFO_TEXT_STYLE;\n    }\n\n    setContextRef(ctx) {\n      this.ctx = ctx;\n    }\n\n    paintCanvas() {\n      this.setCommonStyles();\n      this.clearCanvas();\n\n      for (const tile of this.map.tiles) {\n        if (tile.isVisible) {\n          if (this.gameplayUi.infoOverlay === TileInfoOverlayId.TEXT) {\n            this.paintTileInfoText(tile);\n          }\n\n          if (this.gameplayUi.infoOverlay === TileInfoOverlayId.YIELD) {\n            this.paintTileInfoYield(tile);\n          }\n\n          if (this.gameplayUi.showGrid) {\n            this.paintRightSideEdges(tile);\n          }\n        }\n      }\n\n      if (this.gameplayUi.showGrid) {\n        for (const tile of this.firstRowTiles) {\n          if (tile.isVisible) {\n            this.paintTopLeftEdge(tile);\n          }\n        }\n\n        for (const tile of this.lastRowTiles) {\n          if (tile.isVisible) {\n            this.paintBottomLeftEdge(tile);\n          }\n        }\n      }\n\n      this.wbHoveredTiles.forEach(tile => {\n        if (tile.isVisible) {\n          this.paintTileHighlight(tile, TileHighlightId.WB_TERRAIN_PLACEMENT);\n        }\n      });\n    }\n\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n\n    createTilePath(tile) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(tile.px.x + this.size.vertices[0].x, tile.px.y + this.size.vertices[0].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[1].x, tile.px.y + this.size.vertices[1].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[2].x, tile.px.y + this.size.vertices[2].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[3].x, tile.px.y + this.size.vertices[3].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[4].x, tile.px.y + this.size.vertices[4].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[5].x, tile.px.y + this.size.vertices[5].y);\n      this.ctx.closePath();\n    }\n\n    paintTileInfoText(tile) {\n      const tileHorizontalCenter = tile.px.x + this.size.tile.halfWidth;\n      const tileBottom = tile.px.y + this.size.tile.height;\n      this.ctx.fillText(`${tile.grid.x}, ${tile.grid.y}`, tileHorizontalCenter, tileBottom - TILE_INFO_TEXT_SIZE);\n\n      if (this.size.tile.width >= TILE_INFO_TEXT_MIN_TILE_WIDTH) {\n        const terrainBaseName = this.terrainBaseNamePipe.transform(tile.terrain.base.id).toUpperCase();\n        const terrainFeatureName = this.terrainFeatureNamePipe.transform(tile.terrain.feature.id).toUpperCase();\n        const terrainResourceName = this.terrainResourceNamePipe.transform(tile.terrain.resourceId).toUpperCase();\n        const terrainImprovementName = this.terrainImprovementNamePipe.transform(tile.terrain.improvementId).toUpperCase();\n        this.ctx.fillText(terrainImprovementName, tileHorizontalCenter, tileBottom - (2 * TILE_INFO_TEXT_SIZE + 2));\n        this.ctx.fillText(terrainResourceName, tileHorizontalCenter, tileBottom - (3 * TILE_INFO_TEXT_SIZE + 4));\n        this.ctx.fillText(terrainFeatureName, tileHorizontalCenter, tileBottom - (4 * TILE_INFO_TEXT_SIZE + 6));\n        this.ctx.fillText(terrainBaseName, tileHorizontalCenter, tileBottom - (5 * TILE_INFO_TEXT_SIZE + 8));\n      }\n    }\n\n    paintTileInfoYield(tile) {// TODO\n    }\n\n    paintTileHighlight(tile, tileHighlight) {\n      this.ctx.save();\n      this.ctx.fillStyle = TILE_HIGHLIGHT_ID_TO_COLOR_MAP[tileHighlight];\n      this.createTilePath(tile);\n      this.ctx.fill();\n      this.ctx.restore();\n    }\n\n    paintRightSideEdges(tile) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(tile.px.x + this.size.vertices[0].x, tile.px.y + this.size.vertices[0].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[1].x, tile.px.y + this.size.vertices[1].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[2].x, tile.px.y + this.size.vertices[2].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[3].x, tile.px.y + this.size.vertices[3].y);\n      this.ctx.stroke();\n    }\n\n    paintTopLeftEdge(tile) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(tile.px.x + this.size.vertices[5].x, tile.px.y + this.size.vertices[5].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[0].x, tile.px.y + this.size.vertices[0].y);\n      this.ctx.stroke();\n    }\n\n    paintBottomLeftEdge(tile) {\n      this.ctx.beginPath();\n      this.ctx.moveTo(tile.px.x + this.size.vertices[3].x, tile.px.y + this.size.vertices[3].y);\n      this.ctx.lineTo(tile.px.x + this.size.vertices[4].x, tile.px.y + this.size.vertices[4].y);\n      this.ctx.stroke();\n    }\n\n  }\n\n  MapCanvasService.ɵfac = function MapCanvasService_Factory(t) {\n    return new (t || MapCanvasService)(i0.ɵɵinject(i1.TileUiService), i0.ɵɵinject(i2.MapStore), i0.ɵɵinject(i3.CameraStore), i0.ɵɵinject(i4.SizeStore), i0.ɵɵinject(i5.GameplayUiStore), i0.ɵɵinject(i6.WorldBuilderHoveredTilesStore), i0.ɵɵinject(i7.TerrainBaseNamePipe), i0.ɵɵinject(i8.TerrainFeatureNamePipe), i0.ɵɵinject(i9.TerrainImprovementNamePipe), i0.ɵɵinject(i10.TerrainResourceNamePipe));\n  };\n\n  MapCanvasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapCanvasService,\n    factory: MapCanvasService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapCanvasService;\n})();","map":null,"metadata":{},"sourceType":"module"}