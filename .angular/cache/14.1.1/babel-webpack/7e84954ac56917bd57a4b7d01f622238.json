{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { ModalId, ScreenId, SidebarId } from '../models/ui';\nimport { DEFAULT_UI } from '../consts/ui.const';\nimport * as i0 from \"@angular/core\";\nexport let UiStore = /*#__PURE__*/(() => {\n  class UiStore {\n    constructor() {\n      // tslint:disable-next-line:variable-name\n      this._ui = new BehaviorSubject(DEFAULT_UI);\n      this.ui = this._ui.asObservable();\n    } // SCREEN\n\n\n    setScreen(screenId) {\n      this._ui.next(Object.assign(Object.assign({}, this._ui.value), {\n        screen: screenId\n      }));\n    } // MODAL\n\n\n    openModal(modalId) {\n      this._ui.next(Object.assign(Object.assign({}, this._ui.value), {\n        modal: modalId\n      }));\n    }\n\n    closeModal() {\n      this._ui.next(Object.assign(Object.assign({}, this._ui.value), {\n        modal: ModalId.NONE\n      }));\n    }\n\n    toggleModal(modalId) {\n      const newModalId = this._ui.value.modal === modalId ? ModalId.NONE : modalId;\n\n      this._ui.next(Object.assign(Object.assign({}, this._ui.value), {\n        modal: newModalId\n      }));\n    } // SIDEBAR\n\n\n    openSidebar(sidebarId) {\n      this._ui.next(Object.assign(Object.assign({}, this._ui.value), {\n        sidebar: sidebarId\n      }));\n    }\n\n    closeSidebar() {\n      this._ui.next(Object.assign(Object.assign({}, this._ui.value), {\n        sidebar: SidebarId.NONE\n      }));\n    }\n\n    toggleSidebar(sidebarId) {\n      const newSidebarId = this._ui.value.sidebar === sidebarId ? SidebarId.NONE : sidebarId;\n\n      this._ui.next(Object.assign(Object.assign({}, this._ui.value), {\n        sidebar: newSidebarId\n      }));\n    } // OTHER\n\n\n    escapeView() {\n      const ui = this._ui.value;\n\n      if (ui.sidebar !== SidebarId.NONE) {\n        this.closeSidebar();\n        return;\n      }\n\n      if (ui.modal !== ModalId.NONE) {\n        this.closeModal();\n        return;\n      }\n\n      if (ui.screen === ScreenId.MAIN_MENU) {\n        this.openModal(ModalId.EXIT_GAME_CONFIRMATION);\n        return;\n      }\n\n      if (ui.screen === ScreenId.GAMEPLAY) {\n        this.openModal(ModalId.IN_GAME_MENU);\n        return;\n      }\n    }\n\n  }\n\n  UiStore.ɵfac = function UiStore_Factory(t) {\n    return new (t || UiStore)();\n  };\n\n  UiStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UiStore,\n    factory: UiStore.ɵfac\n  });\n  return UiStore;\n})();","map":null,"metadata":{},"sourceType":"module"}