{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { DEFAULT_SIZE } from '../consts/size.const';\nimport * as i0 from \"@angular/core\";\nexport let SizeStore = /*#__PURE__*/(() => {\n  class SizeStore {\n    constructor() {\n      // tslint:disable-next-line:variable-name\n      this._size = new BehaviorSubject(DEFAULT_SIZE);\n      this.size = this._size.asObservable();\n    }\n\n    next(sizeSet) {\n      this._size.next(sizeSet);\n    }\n\n    setTileSize(tileSize) {\n      this.next(Object.assign(Object.assign({}, this._size.value), {\n        tile: tileSize\n      }));\n    }\n\n    setRowSize(rowSize) {\n      this.next(Object.assign(Object.assign({}, this._size.value), {\n        row: rowSize\n      }));\n    }\n\n    setMapSize(mapSize) {\n      this.next(Object.assign(Object.assign({}, this._size.value), {\n        map: mapSize\n      }));\n    }\n\n    setVertices(vertices) {\n      this.next(Object.assign(Object.assign({}, this._size.value), {\n        vertices\n      }));\n    }\n\n    setScreenSize(screenSize) {\n      this.next(Object.assign(Object.assign({}, this._size.value), {\n        screen: screenSize\n      }));\n    }\n\n  }\n\n  SizeStore.ɵfac = function SizeStore_Factory(t) {\n    return new (t || SizeStore)();\n  };\n\n  SizeStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SizeStore,\n    factory: SizeStore.ɵfac\n  });\n  return SizeStore;\n})();","map":null,"metadata":{},"sourceType":"module"}