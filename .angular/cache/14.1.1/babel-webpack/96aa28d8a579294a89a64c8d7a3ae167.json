{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nimport * as i2 from \"./tile-yield.service\";\nimport * as i3 from \"./zip.service\";\nimport * as i4 from \"../stores/gameplay-ui.store\";\nimport * as i5 from \"../stores/camera.store\";\nimport * as i6 from \"../stores/map.store\";\nimport * as i7 from \"../stores/save-headers.store\";\nexport let SaveService = /*#__PURE__*/(() => {\n  class SaveService {\n    constructor(localStorageService, tileYieldService, zipService, gameplayUiStore, cameraStore, mapStore, saveHeadersStore, ngZone) {\n      this.localStorageService = localStorageService;\n      this.tileYieldService = tileYieldService;\n      this.zipService = zipService;\n      this.gameplayUiStore = gameplayUiStore;\n      this.cameraStore = cameraStore;\n      this.mapStore = mapStore;\n      this.saveHeadersStore = saveHeadersStore;\n      this.ngZone = ngZone;\n      this.LOCAL_STORAGE_SAVE_PREFIX = 'Save-';\n    }\n\n    extractSaveHeader(save) {\n      return {\n        name: save.name,\n        uuid: save.uuid,\n        timestamp: save.timestamp,\n        isAutosave: save.isAutosave\n      };\n    }\n\n    extractSaveData(save) {\n      return {\n        gameplayUi: save.gameplayUi,\n        camera: save.camera,\n        map: save.map\n      };\n    }\n\n    stripCalculatedData(saveData) {\n      for (const tile of saveData.map.tiles) {\n        delete tile.isVisible;\n        delete tile.px;\n        delete tile.yield;\n      }\n    }\n\n    save(save) {\n      const saveHeader = this.extractSaveHeader(save);\n      this.saveHeadersStore.add(saveHeader);\n      const saveData = this.extractSaveData(save);\n      this.stripCalculatedData(saveData);\n      const worker = new Worker('./../workers/zip.worker', {\n        type: 'module'\n      });\n      worker.postMessage(saveData);\n\n      worker.onmessage = message => {\n        const key = this.LOCAL_STORAGE_SAVE_PREFIX + save.uuid;\n        const zippedSaveData = message.data;\n        this.localStorageService.set(key, zippedSaveData);\n        worker.terminate();\n      };\n    } // Used in Load Game modal and Main Menu component\n\n\n    load(saveUuid) {\n      const key = this.LOCAL_STORAGE_SAVE_PREFIX + saveUuid;\n      const zippedSave = this.localStorageService.get(key);\n      const saveData = this.zipService.unzip(zippedSave);\n      this.gameplayUiStore.next(saveData.gameplayUi);\n      this.cameraStore.next(saveData.camera);\n      this.mapStore.next(saveData.map);\n    }\n\n    delete(saveUuid) {\n      this.saveHeadersStore.remove(saveUuid);\n      const key = this.LOCAL_STORAGE_SAVE_PREFIX + saveUuid;\n      this.localStorageService.remove(key);\n    }\n\n  }\n\n  SaveService.ɵfac = function SaveService_Factory(t) {\n    return new (t || SaveService)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.TileYieldService), i0.ɵɵinject(i3.ZipService), i0.ɵɵinject(i4.GameplayUiStore), i0.ɵɵinject(i5.CameraStore), i0.ɵɵinject(i6.MapStore), i0.ɵɵinject(i7.SaveHeadersStore), i0.ɵɵinject(i0.NgZone));\n  };\n\n  SaveService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SaveService,\n    factory: SaveService.ɵfac,\n    providedIn: 'root'\n  });\n  return SaveService;\n})();","map":null,"metadata":{},"sourceType":"module"}