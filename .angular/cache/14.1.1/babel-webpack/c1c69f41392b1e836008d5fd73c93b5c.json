{"ast":null,"code":"import { interval } from 'rxjs';\nimport { PerformanceMeterModeId } from '../../../../../models/performance-meter';\nimport { CANVAS, CHART, MAX_VALUES, PERFORMANCE_MODE_TO_RANGE_MAP } from '../../../../../consts/performance-meter.const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../../services/generator.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nconst _c0 = [\"canvas\"];\nconst _c1 = [\"class\", \"performance-chart-component\"];\n\nfunction PerformanceChartComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r0.averageFrame, \"ms)\");\n  }\n}\n\nfunction PerformanceChartComponent_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r1.averageFps, \")\");\n  }\n}\n\nexport let PerformanceChartComponent = /*#__PURE__*/(() => {\n  class PerformanceChartComponent {\n    constructor(ngZone, cdr, generatorService) {\n      this.ngZone = ngZone;\n      this.cdr = cdr;\n      this.generatorService = generatorService;\n      this.AVERAGE_VALUE_INTERVAL = 500;\n      this.PerformanceMeterModeId = PerformanceMeterModeId;\n      this.recordedValues = [];\n      this.subscriptions = [];\n    }\n\n    ngOnInit() {\n      this.initContext();\n      this.setMeterMode(PerformanceMeterModeId.FRAME);\n      this.initRequestAnimationFrame();\n      this.initAverageValuesCalculations();\n    }\n\n    ngOnDestroy() {\n      this.unsubscribeFromData();\n      this.cancelAnimationFrame();\n    }\n\n    initContext() {\n      this.ctx = this.canvas.nativeElement.getContext('2d');\n    }\n\n    initRequestAnimationFrame() {\n      this.ngZone.runOutsideAngular(() => {\n        this.then = this.generatorService.nowMilliseconds();\n        this.requestAnimationFrame();\n      });\n    }\n\n    initAverageValuesCalculations() {\n      this.subscriptions.push(interval(this.AVERAGE_VALUE_INTERVAL).subscribe(() => this.updateAverageValues()));\n    }\n\n    unsubscribeFromData() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    cancelAnimationFrame() {\n      window.cancelAnimationFrame(this.animationFrameId);\n    }\n\n    setMeterMode(meterMode) {\n      if (meterMode !== this.performanceMeterMode) {\n        this.performanceMeterMode = meterMode;\n        this.recordedValues = [];\n      }\n    }\n\n    requestAnimationFrame() {\n      this.animationFrameId = window.requestAnimationFrame(() => {\n        this.requestAnimationFrame();\n        this.now = this.generatorService.nowMilliseconds();\n        const frameTime = this.now - this.then;\n        this.addMeterData(frameTime);\n        this.trimMeterData();\n        this.then = this.now;\n        this.cdr.detectChanges();\n        this.drawChart();\n      });\n    }\n\n    addMeterData(frameTime) {\n      switch (this.performanceMeterMode) {\n        case PerformanceMeterModeId.FRAME:\n          this.recordedValues.push(frameTime);\n          break;\n\n        case PerformanceMeterModeId.FPS:\n          this.recordedValues.push(Math.floor(1000 / frameTime));\n          break;\n      }\n    }\n\n    trimMeterData() {\n      if (this.recordedValues.length > MAX_VALUES) {\n        this.recordedValues.shift();\n      }\n    }\n\n    drawChart() {\n      this.clearCanvas();\n      this.drawLegend();\n      this.drawData();\n    }\n\n    clearCanvas() {\n      this.ctx.clearRect(0, 0, CANVAS.WIDTH, CANVAS.HEIGHT);\n    }\n\n    drawLegend() {\n      const range = PERFORMANCE_MODE_TO_RANGE_MAP[this.performanceMeterMode];\n      this.ctx.lineWidth = 1;\n      this.ctx.strokeStyle = CANVAS.LEGEND_STROKE_STYLE;\n      this.ctx.beginPath();\n      this.ctx.moveTo(0, CANVAS.HEIGHT * 0.25 + .5);\n      this.ctx.lineTo(CANVAS.WIDTH, CANVAS.HEIGHT * 0.25 + .5);\n      this.ctx.moveTo(0, CANVAS.HEIGHT * 0.50 + .5);\n      this.ctx.lineTo(CANVAS.WIDTH, CANVAS.HEIGHT * 0.50 + .5);\n      this.ctx.moveTo(0, CANVAS.HEIGHT * 0.75 + .5);\n      this.ctx.lineTo(CANVAS.WIDTH, CANVAS.HEIGHT * 0.75 + .5);\n      this.ctx.stroke();\n      this.ctx.font = CANVAS.LEGEND_FONT;\n      this.ctx.fillStyle = CANVAS.LEGEND_FILL_STYLE;\n      this.ctx.fillText(range.toString(), 3, 12);\n      this.ctx.fillText((range * 0.75).toString(), 3, CANVAS.HEIGHT * 0.25 + 12);\n      this.ctx.fillText((range * 0.50).toString(), 3, CANVAS.HEIGHT * 0.50 + 12);\n      this.ctx.fillText((range * 0.25).toString(), 3, CANVAS.HEIGHT * 0.75 + 12);\n    }\n\n    drawData() {\n      const dataDeficitCount = MAX_VALUES - this.recordedValues.length;\n      const dataDeficitHorizontalCompensation = dataDeficitCount * CHART.WIDTH_TO_RESULTS_RATIO;\n      const range = PERFORMANCE_MODE_TO_RANGE_MAP[this.performanceMeterMode];\n      this.ctx.fillStyle = CANVAS.DATA_FILL_STYLE;\n      this.recordedValues.forEach((value, i) => {\n        const barHeight = value / range * CANVAS.HEIGHT;\n        const x1 = i * CHART.WIDTH_TO_RESULTS_RATIO + dataDeficitHorizontalCompensation;\n        const y1 = CANVAS.HEIGHT - barHeight;\n        this.ctx.fillRect(x1, y1, CHART.WIDTH_TO_RESULTS_RATIO - 1, barHeight);\n      });\n    }\n\n    updateAverageValues() {\n      const sum = this.recordedValues.reduce((a, b) => a + b, 0);\n      const average = (sum / this.recordedValues.length).toFixed(2);\n\n      switch (this.performanceMeterMode) {\n        case PerformanceMeterModeId.FRAME:\n          this.averageFrame = average;\n          this.averageFps = null;\n          break;\n\n        case PerformanceMeterModeId.FPS:\n          this.averageFrame = null;\n          this.averageFps = average;\n          break;\n      }\n    }\n\n  }\n\n  PerformanceChartComponent.ɵfac = function PerformanceChartComponent_Factory(t) {\n    return new (t || PerformanceChartComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.GeneratorService));\n  };\n\n  PerformanceChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PerformanceChartComponent,\n    selectors: [[\"\", 8, \"performance-chart-component\"]],\n    viewQuery: function PerformanceChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n      }\n    },\n    attrs: _c1,\n    decls: 11,\n    vars: 6,\n    consts: [[3, \"click\"], [4, \"ngIf\"], [\"width\", \"360\", \"height\", \"120\"], [\"canvas\", \"\"]],\n    template: function PerformanceChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h3\");\n        i0.ɵɵtext(1, \"FPS meter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"form\")(3, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function PerformanceChartComponent_Template_button_click_3_listener() {\n          return ctx.setMeterMode(ctx.PerformanceMeterModeId.FRAME);\n        });\n        i0.ɵɵtext(4, \" Single frame \");\n        i0.ɵɵtemplate(5, PerformanceChartComponent_ng_container_5_Template, 2, 1, \"ng-container\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function PerformanceChartComponent_Template_button_click_6_listener() {\n          return ctx.setMeterMode(ctx.PerformanceMeterModeId.FPS);\n        });\n        i0.ɵɵtext(7, \" Single FPS \");\n        i0.ɵɵtemplate(8, PerformanceChartComponent_ng_container_8_Template, 2, 1, \"ng-container\", 1);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(9, \"canvas\", 2, 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"active\", ctx.performanceMeterMode === ctx.PerformanceMeterModeId.FRAME);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.performanceMeterMode === ctx.PerformanceMeterModeId.FRAME);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"active\", ctx.performanceMeterMode === ctx.PerformanceMeterModeId.FPS);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.performanceMeterMode === ctx.PerformanceMeterModeId.FPS);\n      }\n    },\n    dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.NgForm],\n    styles: [\".performance-chart-component{padding:10px}.performance-chart-component h3{margin-bottom:10px}.performance-chart-component form button{width:175px;text-align:center;padding:5px 10px;margin-bottom:10px;cursor:pointer}.performance-chart-component form button:nth-of-type(2n+1){margin-right:10px}.performance-chart-component form button.active{border:3px solid #0075ff}.performance-chart-component canvas{background:rgba(11,62,11,.79)}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PerformanceChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}