{"ast":null,"code":"import { CAMERA_MAX_EMPTY_WINDOW_SPACE_PC, CAMERA_MAX_ZOOM_LEVEL, CAMERA_MIN_ZOOM_LEVEL } from '../consts/camera.const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../stores/size.store\";\nexport let CameraService = /*#__PURE__*/(() => {\n  class CameraService {\n    constructor(sizeStore) {\n      this.sizeStore = sizeStore;\n      this.subscribeToData();\n    }\n\n    subscribeToData() {\n      this.sizeStore.size.subscribe(size => this.size = size);\n    } // Keep zoomLevel in between min and max\n\n\n    normalizeZoomLevel(zoomLevel) {\n      if (zoomLevel > CAMERA_MAX_ZOOM_LEVEL) {\n        zoomLevel = CAMERA_MAX_ZOOM_LEVEL;\n      }\n\n      if (zoomLevel < CAMERA_MIN_ZOOM_LEVEL) {\n        zoomLevel = CAMERA_MIN_ZOOM_LEVEL;\n      }\n\n      return zoomLevel;\n    } // Vertically: limits empty space on top and bottom of the map\n    // Horizontally: Keep translate within range of (-mapWidth + tileWidth/2) ... 0\n\n\n    normalizeTranslation(translate) {\n      // normalize X\n      translate.x = (translate.x - this.size.row.width) % this.size.row.width; // center the map vertically if its zoomed out very much\n\n      if (this.size.screen.height > this.size.map.height) {\n        translate.y = Math.floor((this.size.screen.height - this.size.map.height) / 2);\n        return translate;\n      } else {\n        // move map up if there is too much space above the map\n        const maxEmptySpace = Math.floor(this.size.screen.height * CAMERA_MAX_EMPTY_WINDOW_SPACE_PC / 100);\n\n        if (translate.y > maxEmptySpace) {\n          translate.y = maxEmptySpace;\n        } // move map down if there is too much space under the map\n\n\n        const minTranslate = -(this.size.map.height - this.size.screen.height + maxEmptySpace);\n\n        if (minTranslate > translate.y) {\n          translate.y = minTranslate;\n        }\n\n        return translate;\n      }\n    }\n\n  }\n\n  CameraService.ɵfac = function CameraService_Factory(t) {\n    return new (t || CameraService)(i0.ɵɵinject(i1.SizeStore));\n  };\n\n  CameraService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CameraService,\n    factory: CameraService.ɵfac,\n    providedIn: 'root'\n  });\n  return CameraService;\n})();","map":null,"metadata":{},"sourceType":"module"}