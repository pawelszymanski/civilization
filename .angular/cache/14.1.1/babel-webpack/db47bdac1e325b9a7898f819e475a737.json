{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../stores/camera.store\";\nimport * as i2 from \"../stores/map.store\";\nimport * as i3 from \"../stores/size.store\";\nexport let SizeService = /*#__PURE__*/(() => {\n  class SizeService {\n    constructor(cameraStore, mapStore, sizeStore, window) {\n      this.cameraStore = cameraStore;\n      this.mapStore = mapStore;\n      this.sizeStore = sizeStore;\n      this.window = window;\n      this.subscribeToData();\n      this.initWindowResizeEvent();\n      this.updateScreen();\n    }\n\n    subscribeToData() {\n      this.cameraStore.camera.subscribe(camera => this.onCameraNext(camera));\n      this.mapStore.map.subscribe(map => this.onMapNext(map));\n    }\n\n    onCameraNext(camera) {\n      this.camera = camera;\n      this.updateAll();\n    }\n\n    onMapNext(map) {\n      this.map = map;\n      this.updateAll();\n    }\n\n    initWindowResizeEvent() {\n      window.addEventListener('resize', () => {\n        this.updateScreen();\n      });\n    }\n\n    calcTile() {\n      return {\n        width: Math.floor(this.camera.tileSize * 0.9),\n        height: Math.floor(this.camera.tileSize),\n        halfWidth: Math.floor(this.camera.tileSize * 0.9 * 0.50),\n        halfHeight: Math.floor(this.camera.tileSize * 0.50),\n        oneQuarterWidth: Math.floor(this.camera.tileSize * 0.9 * 0.25),\n        oneQuarterHeight: Math.floor(this.camera.tileSize * 0.25) + 1,\n        threeQuarterWidth: Math.floor(this.camera.tileSize * 0.9 * 0.75),\n        threeQuarterHeight: Math.floor(this.camera.tileSize * 0.75) - 1\n      };\n    }\n\n    calcRow(tile) {\n      return {\n        width: tile.width * this.map.width,\n        height: Math.floor(tile.height * 0.75) - 1\n      };\n    }\n\n    calcMap(tile, row) {\n      return {\n        width: tile.width * this.map.width + tile.halfWidth,\n        height: row.height * this.map.height + Math.floor(tile.height * 0.25) + 1 // this.map.height is 1-based, need -1\n\n      };\n    }\n\n    calcVertices(tile) {\n      return [{\n        x: tile.halfWidth,\n        y: 0\n      }, {\n        x: tile.width,\n        y: tile.oneQuarterHeight\n      }, {\n        x: tile.width,\n        y: tile.threeQuarterHeight\n      }, {\n        x: tile.halfWidth,\n        y: tile.height\n      }, {\n        x: 0,\n        y: tile.threeQuarterHeight\n      }, {\n        x: 0,\n        y: tile.oneQuarterHeight\n      }];\n    }\n\n    calcScreen() {\n      return {\n        width: this.window.innerWidth,\n        height: this.window.innerHeight,\n        halfWidth: Math.floor(this.window.innerWidth / 2),\n        halfHeight: Math.floor(this.window.innerHeight / 2)\n      };\n    }\n\n    updateScreen() {\n      const screen = this.calcScreen();\n      this.sizeStore.setScreenSize(screen);\n    }\n\n    updateAll() {\n      if (this.camera && this.map) {\n        const tile = this.calcTile();\n        const row = this.calcRow(tile);\n        const map = this.calcMap(tile, row);\n        const screen = this.calcScreen();\n        const vertices = this.calcVertices(tile);\n        this.sizeStore.next({\n          tile,\n          row,\n          map,\n          screen,\n          vertices\n        });\n      }\n    }\n\n  }\n\n  SizeService.ɵfac = function SizeService_Factory(t) {\n    return new (t || SizeService)(i0.ɵɵinject(i1.CameraStore), i0.ɵɵinject(i2.MapStore), i0.ɵɵinject(i3.SizeStore), i0.ɵɵinject(Window));\n  };\n\n  SizeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SizeService,\n    factory: SizeService.ɵfac,\n    providedIn: 'root'\n  });\n  return SizeService;\n})();","map":null,"metadata":{},"sourceType":"module"}