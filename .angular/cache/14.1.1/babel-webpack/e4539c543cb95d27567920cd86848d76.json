{"ast":null,"code":"import { YieldId } from '../models/yield';\nimport { TERRAIN_BASE_SET, TERRAIN_FEATURE_SET, TERRAIN_IMPROVEMENT_SET, TERRAIN_RESOURCE_SET } from '../consts/terrain.const';\nimport { TerrainFeatureId } from '../models/terrain';\nimport * as i0 from \"@angular/core\";\nexport let TileYieldService = /*#__PURE__*/(() => {\n  class TileYieldService {\n    removeTileYield(tile) {\n      tile.yield = undefined;\n    }\n\n    updateTileYield(tile) {\n      tile.yield = this.calcTileYield(tile);\n    }\n\n    calcTileYield(tile) {\n      const result = {\n        [YieldId.FOOD]: 0,\n        [YieldId.PRODUCTION]: 0,\n        [YieldId.GOLD]: 0,\n        [YieldId.SCIENCE]: 0,\n        [YieldId.CULTURE]: 0,\n        [YieldId.FAITH]: 0,\n        [YieldId.POWER]: 0,\n        [YieldId.TOURISM]: 0\n      }; // Ice does not give any resources\n\n      if (tile.terrain.feature.id === TerrainFeatureId.ICE) {\n        return result;\n      }\n\n      const tileBaseYield = TERRAIN_BASE_SET[tile.terrain.base.id].yield;\n      Object.keys(tileBaseYield).forEach(yieldId => {\n        result[yieldId] += tileBaseYield[yieldId];\n      });\n\n      if (tile.terrain.feature.id) {\n        const tileFeatureYield = TERRAIN_FEATURE_SET[tile.terrain.feature.id].yield;\n        Object.keys(tileFeatureYield).forEach(yieldId => {\n          result[yieldId] += tileFeatureYield[yieldId];\n        });\n      }\n\n      if (tile.terrain.resourceId) {\n        const tileResourceYield = TERRAIN_RESOURCE_SET[tile.terrain.resourceId].yield;\n        Object.keys(tileResourceYield).forEach(yieldId => {\n          result[yieldId] += tileResourceYield[yieldId];\n        });\n      }\n\n      if (tile.terrain.improvementId) {\n        const tileImprovementYield = TERRAIN_IMPROVEMENT_SET[tile.terrain.improvementId].yield;\n        Object.keys(tileImprovementYield).forEach(yieldId => {\n          result[yieldId] += tileImprovementYield[yieldId];\n        });\n      }\n\n      return result;\n    }\n\n  }\n\n  TileYieldService.ɵfac = function TileYieldService_Factory(t) {\n    return new (t || TileYieldService)();\n  };\n\n  TileYieldService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TileYieldService,\n    factory: TileYieldService.ɵfac,\n    providedIn: 'root'\n  });\n  return TileYieldService;\n})();","map":null,"metadata":{},"sourceType":"module"}