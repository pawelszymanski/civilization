{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { TerrainFeatureId } from '../models/terrain';\nimport { TERRAIN_BASE_SET, TERRAIN_FEATURE_SET } from '../consts/terrain.const';\nimport { DEFAULT_MAP } from '../consts/map.const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/generator.service\";\nimport * as i2 from \"../services/tile-yield.service\";\nimport * as i3 from \"../services/tile-terrain.service\";\nexport let MapStore = /*#__PURE__*/(() => {\n  class MapStore {\n    constructor(generatorService, tileYieldService, tileTerrainService) {\n      this.generatorService = generatorService;\n      this.tileYieldService = tileYieldService;\n      this.tileTerrainService = tileTerrainService; // tslint:disable-next-line:variable-name\n\n      this._map = new BehaviorSubject(DEFAULT_MAP);\n      this.map = this._map.asObservable();\n    }\n\n    next(map) {\n      this._map.next(map);\n    }\n\n    tileIndex(tile) {\n      return tile.grid.x * this._map.value.height + tile.grid.y;\n    }\n\n    deepCopyTiles(tiles) {\n      return tiles.map(tile => JSON.parse(JSON.stringify(tile)));\n    }\n\n    updateTiles(tiles) {\n      const map = this._map.getValue();\n\n      for (const tile of tiles) {\n        const tileIndex = this.tileIndex(tile);\n        map.tiles[tileIndex] = tile;\n      }\n\n      this.next(map);\n    }\n\n    setTilesTerrainBase(tiles, terrainBaseId) {\n      const newTiles = this.deepCopyTiles(tiles);\n      newTiles.forEach(newTile => {\n        const variantCount = TERRAIN_BASE_SET[terrainBaseId].ui.variantCount; // There is no TerrainBaseId.NONE, it's always some terrain that is listed in TERRAIN_BASE_SET\n\n        const variant = this.generatorService.randomPositiveInteger(variantCount);\n        newTile.terrain.base = {\n          id: terrainBaseId,\n          uiVariant: variant\n        };\n        this.tileYieldService.updateTileYield(newTile);\n      });\n      this.updateTiles(newTiles);\n    }\n\n    setTilesTerrainFeature(tiles, terrainFeatureId) {\n      const newTiles = this.deepCopyTiles(tiles);\n      newTiles.forEach(newTile => {\n        if (terrainFeatureId === TerrainFeatureId.NONE) {\n          // Check for TerrainFeatureId.NONE since it has to have uiVariant set manually (not listed in the TERRAIN_FEATURE_SET)\n          newTile.terrain.feature = {\n            id: TerrainFeatureId.NONE,\n            uiVariant: null\n          };\n        } else {\n          if (this.tileTerrainService.canFeatureBePutOnTile(terrainFeatureId, newTile)) {\n            const variantCount = TERRAIN_FEATURE_SET[terrainFeatureId].ui.variantCount;\n            const variant = this.generatorService.randomPositiveInteger(variantCount);\n            newTile.terrain.feature = {\n              id: terrainFeatureId,\n              uiVariant: variant\n            };\n          }\n        }\n\n        this.tileYieldService.updateTileYield(newTile);\n      });\n      this.updateTiles(newTiles);\n    }\n\n    setTilesTerrainResource(tiles, terrainResourceId) {\n      const newTiles = this.deepCopyTiles(tiles);\n      newTiles.forEach(newTile => {\n        if (this.tileTerrainService.canResourceBePutOnTile(terrainResourceId, newTile)) {\n          newTile.terrain.resourceId = terrainResourceId; // Resources do not have any ui variants\n\n          this.tileYieldService.updateTileYield(newTile);\n        }\n      });\n      this.updateTiles(newTiles);\n    }\n\n    setTilesTerrainImprovement(tiles, terrainImprovementId) {\n      const newTiles = this.deepCopyTiles(tiles);\n      newTiles.forEach(newTile => {\n        if (this.tileTerrainService.canImprovementBePutOnTile(terrainImprovementId, newTile)) {\n          newTile.terrain.improvementId = terrainImprovementId; // Improvements do not have any ui variants\n\n          this.tileYieldService.updateTileYield(newTile);\n        }\n      });\n      this.updateTiles(newTiles);\n    }\n\n  }\n\n  MapStore.ɵfac = function MapStore_Factory(t) {\n    return new (t || MapStore)(i0.ɵɵinject(i1.GeneratorService), i0.ɵɵinject(i2.TileYieldService), i0.ɵɵinject(i3.TileTerrainService));\n  };\n\n  MapStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapStore,\n    factory: MapStore.ɵfac\n  });\n  return MapStore;\n})();","map":null,"metadata":{},"sourceType":"module"}