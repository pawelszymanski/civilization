{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { CAMERA_ZOOM_LEVEL_TO_TILE_SIZE_MAP, DEFAULT_CAMERA } from '../consts/camera.const';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/camera.service\";\nexport let CameraStore = /*#__PURE__*/(() => {\n  class CameraStore {\n    constructor(cameraService) {\n      this.cameraService = cameraService; // tslint:disable-next-line:variable-name\n\n      this._camera = new BehaviorSubject(DEFAULT_CAMERA);\n      this.camera = this._camera.asObservable();\n    }\n\n    next(camera) {\n      this._camera.next(camera);\n    }\n\n    setTileSize(tileSize) {\n      this.next(Object.assign(Object.assign({}, this._camera.value), {\n        tileSize\n      }));\n    }\n\n    setTranslate(translate) {\n      this.next(Object.assign(Object.assign({}, this._camera.value), {\n        translate: this.cameraService.normalizeTranslation(translate)\n      }));\n    }\n\n    setZoomLevel(zoomLevel) {\n      this.next(Object.assign(Object.assign({}, this._camera.value), {\n        zoomLevel,\n        tileSize: CAMERA_ZOOM_LEVEL_TO_TILE_SIZE_MAP[zoomLevel]\n      }));\n    }\n\n    resetAll() {\n      this.next(Object.assign({}, DEFAULT_CAMERA));\n    }\n\n  }\n\n  CameraStore.ɵfac = function CameraStore_Factory(t) {\n    return new (t || CameraStore)(i0.ɵɵinject(i1.CameraService));\n  };\n\n  CameraStore.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CameraStore,\n    factory: CameraStore.ɵfac\n  });\n  return CameraStore;\n})();","map":null,"metadata":{},"sourceType":"module"}